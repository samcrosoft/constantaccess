<?php
namespace Samcrosoft\ConstantAccessTest\Data;

use PHPUnit_Framework_TestCase;
use Samcrosoft\ConstantAccess\Data\ConstantsData;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-09 at 11:33:56.
 */
class ConstantsDataTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var ConstantsData
     */
    protected $oConstantsData;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->oConstantsData = new ConstantsData;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->oConstantsData = null;
    }

    /**
     * @covers ConstantAccess\Data\ConstantsData::getCategoryList
    //     * @todo   Implement testGetCategoryList().
     */
    public function testGetCategoryList()
    {
        $aCategoryLists = $this->oConstantsData->getCategoryList();
        $this->assertTrue(is_array($aCategoryLists), "Constants Data Category List Must Be An Array");
        $this->assertNotEmpty($aCategoryLists, "Constants Data Categories Constants Cannot Be Empty");
    }

    public function testForUndefinedConstantCategories()
    {
        $this->assertTrue(is_array($this->oConstantsData->getUndefinedConstantCategories()), "Undefined Constants Categories Must Be An Array");
        // this may make the test fail because it differs from systems to system
        // $this->assertEquals(count($this->oConstantsData->getUndefinedConstantCategories()), 0, "There Are Some Constant Categories That Has Not Been Defined");
    }

    public function testIfArrayMappingIsAOneDimensionalArray()
    {
        $aMappings = $this->oConstantsData->getArrayMapping();
        $this->assertNotEmpty($aMappings, "Constants Data Array Mappings Cannot Be Empty");
        $this->assertTrue(is_array($aMappings), "Constants Data Array Mapping Is Not An Array");
        $this->assertFalse($this->isArrayMulti($aMappings), "Constants Data Array Mappings Cannot Be MultiDimensional");
    }

    private function isArrayMulti($aVal = null)
    {
        if (!is_array($aVal))
            return false;

        $rv = array_filter($aVal, 'is_array');
        if (count($rv) > 0) return true;
        return false;
    }
}
